using ExcelDna.Integration;
using Excel = Microsoft.Office.Interop.Excel;
using System.Collections.Generic;
using System.Windows.Forms;

public static class ExcelMigration
{
    [ExcelFunction(Description = "Migrate data and show changes in a modeless dialog")]
    public static void MigrateDataWithChanges(string oldSheetName, string newSheetName)
    {
        Excel.Application xlApp = (Excel.Application)ExcelDnaUtil.Application;
        Excel.Worksheet oldSheet = xlApp.Worksheets[oldSheetName];
        Excel.Worksheet newSheet = xlApp.Worksheets[newSheetName];

        int lastRowOld = oldSheet.Cells[oldSheet.Rows.Count, 1].End(Excel.XlDirection.xlUp).Row;
        int lastRowNew = newSheet.Cells[newSheet.Rows.Count, 1].End(Excel.XlDirection.xlUp).Row;

        var changes = new List<string>();

        // ステップ1: 結果欄にデータがない行を除外
        var oldData = new List<(string Question, string Result, string Remarks, int Row)>();
        for (int i = 1; i <= lastRowOld; i++)
        {
            string question = oldSheet.Cells[i, 1].Value;
            string result = oldSheet.Cells[i, 2].Value;
            string remarks = oldSheet.Cells[i, 3].Value;

            if (!string.IsNullOrEmpty(result))
            {
                oldData.Add((question, result, remarks, i));
            }
        }

        // ステップ2: 変更を検出し、データを移行
        var newData = new List<(string Question, string Result, string Remarks, int Row)>();
        for (int i = 1; i <= lastRowNew; i++)
        {
            string newQuestion = newSheet.Cells[i, 1].Value;
            newData.Add((newQuestion, "", "", i));
        }

        // ステップ3: 旧データと新データを比較
        int oldIndex = 0, newIndex = 0;
        while (oldIndex < oldData.Count && newIndex < newData.Count)
        {
            var oldRow = oldData[oldIndex];
            var newRow = newData[newIndex];

            if (oldRow.Question == newRow.Question)
            {
                // 完全一致
                newSheet.Cells[newIndex + 1, 2].Value = oldRow.Result;
                newSheet.Cells[newIndex + 1, 3].Value = oldRow.Remarks;
                oldIndex++;
                newIndex++;
            }
            else if (oldIndex + 1 < oldData.Count && oldData[oldIndex + 1].Question == newRow.Question)
            {
                // 新しいシートで行が削除された
                changes.Add($"削除: {oldRow.Question} 行 {oldRow.Row}");
                oldIndex++;
            }
            else if (newIndex + 1 < newData.Count && oldRow.Question == newData[newIndex + 1].Question)
            {
                // 新しいシートで行が挿入された
                changes.Add($"挿入: {newRow.Question} 行 {newRow.Row}");
                newIndex++;
            }
            else
            {
                // 文言変更または行の移動の可能性
                changes.Add($"変更: {oldRow.Question} から {newRow.Question} 行 {newRow.Row}");
                newSheet.Cells[newIndex + 1, 2].Value = oldRow.Result;
                newSheet.Cells[newIndex + 1, 3].Value = oldRow.Remarks;
                oldIndex++;
                newIndex++;
            }
        }

        // 残りの行を処理
        while (newIndex < newData.Count)
        {
            changes.Add($"挿入: {newData[newIndex].Question} 行 {newData[newIndex].Row}");
            newSheet.Cells[newIndex + 1, 2].Value = "";
            newSheet.Cells[newIndex + 1, 3].Value = "";
            newIndex++;
        }

        // モードレスダイアログで変更を表示
        ShowChangesDialog(changes);
    }

    private static void ShowChangesDialog(List<string> changes)
    {
        Form dialog = new Form
        {
            Text = "変更内容",
            Width = 400,
            Height = 300,
            StartPosition = FormStartPosition.CenterScreen,
            TopMost = true // 常に前面に表示
        };

        ListBox listBox = new ListBox
        {
            Dock = DockStyle.Fill
        };

        foreach (var change in changes)
        {
            listBox.Items.Add(change);
        }

        listBox.DoubleClick += (sender, e) =>
        {
            if (listBox.SelectedItem != null)
            {
                string selectedChange = listBox.SelectedItem.ToString();
                // 対応するセルにジャンプするロジック
                // この部分は具体的な要件に基づいて実装する必要があります
            }
        };

        dialog.Controls.Add(listBox);
        dialog.Show();
    }
}
